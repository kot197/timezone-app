// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}
 
model User {
  id String @id
  email String? @unique
  passwordHash String?
  discordId String? @unique
  discordUsername String?
  discriminator String?
  discordAvatar String?
  discordVerified Boolean?
  discordEmail String?
  sessions Session[]
  friends Friend[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Friend {
  id Int @id @default(autoincrement())
  country String
  country_code String
  timezone String
  location String?
  notes String?
  profilePic String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String
  user User @relation(references: [discordId], fields: [userId], onDelete: Cascade)
  notifications Notification[]
  tags FriendTag[]
}

model Notification {
  id Int @id @default(autoincrement())
  message String
  createdAt DateTime @default(now())

  friendId Int
  friend Friend @relation(references: [id], fields: [friendId])
}

model Tag {
  id Int @id @default(autoincrement())
  name String @unique
  friends FriendTag[]
}

model FriendTag {
  friendId Int
  tagId Int

  // Relations
  friend Friend @relation(references: [id], fields: [friendId])
  tag Tag @relation(references: [id], fields: [tagId])

  // Composite Primary Key
  @@id([friendId, tagId])
}